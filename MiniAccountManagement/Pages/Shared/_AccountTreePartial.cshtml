@using Microsoft.AspNetCore.Html
@using MiniAccountManagement.Models
@model List<AccountNode>

<style>
    .small-btn {
        padding: 2px 4px;
        font-size: 0.6rem;
        line-height: 1;
        border-radius: 3px;
    }

    .accordion-button::after {
        content: none !important;
    }

    .accordion-header {
        display: flex;
        align-items: center;
    }

        .accordion-header .icon {
            margin-right: 10px;
            font-size: 1.2rem;
            cursor: pointer;
        }

    .dropdown-menu {
        min-width: 10rem;
    }
</style>

@if (Model != null && Model.Any())
{
    <div class="accordion" id="accountAccordion">
        @foreach (var node in Model)
        {
            @RenderAccountNode(node)
        }
    </div>
}

@functions {
    private IHtmlContent RenderAccountNode(AccountNode node)
    {
        var output = new HtmlContentBuilder();

        // Begin HTML for the current node
        output.AppendHtml($@"
            <div class='accordion-item'>
                <h2 class='accordion-header' id='heading-{node.AccountId}'>
                    <div class='d-flex align-items-center'>
                ");

        // Conditionally render the collapse icon if the node has children
        if (node.Children.Any())
        {
            output.AppendHtml($@"
                <i class='fas fa-chevron-right icon' data-bs-toggle='collapse' data-bs-target='#collapse-{node.AccountId}' aria-expanded='false' aria-controls='collapse-{node.AccountId}'></i>
            ");
        }

        // Render the button with account details
        output.AppendHtml($@"
            <button class='accordion-button' type='button' data-bs-toggle='collapse'
                    data-bs-target='#collapse-{node.AccountId}' aria-expanded='false'
                    aria-controls='collapse-{node.AccountId}'>
                <strong>{node.AccountCode} - {node.AccountName}</strong>
            </button>

            <div class='ms-3'>
                <button class='btn btn-link btn-sm' type='button' data-bs-toggle='dropdown' aria-expanded='false'>
                    <i class='fas fa-ellipsis-h'></i>
                </button>
                <ul class='dropdown-menu'>
                    <li>
                        <button class='dropdown-item' data-bs-toggle='modal' data-bs-target='#accountModal' data-action='create-child' data-parent-id='{node.AccountId}'>
                            <i class='fas fa-plus'></i> Add Child
                        </button>
                    </li>
                    <li>
                        <button class='dropdown-item' data-bs-toggle='modal' data-bs-target='#accountModal' data-action='edit' data-account-id='{node.AccountId}' data-account-code='{node.AccountCode}' data-account-name='{node.AccountName}' data-parent-id='{node.ParentAccountId}'>
                            <i class='fas fa-edit'></i> Edit
                        </button>
                    </li>
                    <li>
                        <button class='dropdown-item' data-bs-toggle='modal' data-bs-target='#deleteModal' data-account-id='{node.AccountId}' data-account-name='{node.AccountName}'>
                            <i class='fas fa-trash'></i> Delete
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </h2>

    <div id='collapse-{node.AccountId}' class='accordion-collapse collapse' aria-labelledby='heading-{node.AccountId}'
         data-bs-parent='#accountAccordion'>
        <div class='accordion-body'>");

        // Render children if any
        if (node.Children.Any())
        {
            output.AppendHtml("<div class='ms-4'>");
            foreach (var child in node.Children)
            {
                output.AppendHtml(RenderAccountNode(child));
            }
            output.AppendHtml("</div>");
        }

        output.AppendHtml("</div></div></div>");

        // Return the generated HTML content
        return output;
    }
}
